# -*- coding: utf-8 -*-
"""1DSignalInfrastructure.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_yANbguIW-fGhaYnVKHhfqqwYk_2SQ9T
"""

import torch
from torch.utils.data import Dataset, DataLoader
from torch import nn
import pandas as pd
import glob
from google.colab import drive
drive.mount('/content/drive', force_remount=True)
import os
from os import path

"""Fully connected layer - 1D signal"""

class FCN(nn.Module):
  def __init__(self, n_classes, sequence_length=None):
    super(FCN, self).__init__()
    self.FCNLayer1 = nn.Sequential(
        nn.conv1d(in_channels = 1, out_channels = 128, kernel_size = 3, stride = 1, padding = 0),
        nn.BatchNorm1d(128),
        nn.ReLU()
    )

    self.FCNLayer2 = nn.Sequential(
        nn.conv1d(in_channels = 128, out_channels = 256, kernel_size = 3, stride = 1, padding = 0),
        nn.BatchNorm1d(256),
        nn.ReLU()
    )

    self.FCNLayer3 = nn.Sequential(
        nn.conv1d(in_channels = 256, out_channels = 128, kernel_size = 3, stride = 1, padding = 0),
        nn.BatchNorm1d(128),
        nn.ReLU()
    )

    self.AvgPool = nn.AdaptiveAvgPool1d(1)
    self.SoftMax = nn.Softmax()
    self.classifier = nn.Linear(128, n_classes)

  def forward(self, x):
    x = self.FCNLayer1(x)
    x = self.FCNLayer2(x)
    x = self.FCNLayer3(x)
    x = self.AvgPool(x)
    x = x.squeeze(-1)
    x = self.classifier(x)
    x = self.softmax(x)

    return x

"""Training the model"""

def train_model(model, train_loader, criterion, optimizer, device, epochs=100):
  model = model.to(device)
  running_loss = 0.0
  for i,(input, label) in enumerate(train_loader):
    input, label = input.to(device), label.to(device)
    optimizer.zero_grad()
    outputs = model(input)
    loss = criterion(outcome, label)
    loss.backward()
    optimizer.step()

    running_loss += loss.item()

    if (epoch + 1) % 10 == 0:
        print(f'Epoch [{epoch + 1}/{epochs}], Loss: {running_loss / len(train_loader):.4f}')

"""Training the FCN"""

model = FCN(n_classes=2)

model.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001,
                           betas=(0.9, 0.999), eps=1e-8)

train_model(model, train_loader, criterion, optimizer, device)

"""Dataset & dataloader"""

# SignalDataset function
class SignalDataset(Dataset):
  def __init__(self, file, signal_column='I'):
    self.data = pd.read_csv(file)
    self.signal_column = signal_column
    self.signals = self.data[signal_column].values
    filename = os.path.basename(file)
    print(filename)
    self.patient_number = int(filename.split('_')[0])

  def load_patient_data(self):
    file2_data = pd.read_csv('_CTI_REORGANIZE_AF_23_02_2024_corrected.xlsx', skiprows = [0])
    mask = self.patient_number == file2_data['Patient Nb']
    if mask.any():
      self.label = file2_data.loc[mask, 'Long-term SUCCESS post durable PVI?'].iloc[0]

  def __len__(self):
    return(len(self.signals))

  def __get_item__(self, idx):
    return self.signals[idx], self.label

directory_path = '/content/drive/MyDrive/Recherche/CongressAbstracts/CinC_AF/AFib_WACA'
datasets = []
for file in glob.glob(directory_path + '/*.csv'):
    print(file)
    dataset = SignalDataset(file)
    datasets.append(dataset)